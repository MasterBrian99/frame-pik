/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/_app'
import { Route as AppDashboardImport } from './routes/_app/dashboard'
import { Route as publicAuthRouteImport } from './routes/(public)/auth/route'
import { Route as AppProfileIndexImport } from './routes/_app/profile/index'
import { Route as publicAuthIndexImport } from './routes/(public)/auth/index'
import { Route as publicAuthRegisterImport } from './routes/(public)/auth/register'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const AppIndexLazyImport = createFileRoute('/_app/')()
const publicAuthLoginLazyImport = createFileRoute('/(public)/auth/login')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexLazyRoute = AppIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any).lazy(() => import('./routes/_app/index.lazy').then((d) => d.Route))

const AppDashboardRoute = AppDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRoute,
} as any)

const publicAuthRouteRoute = publicAuthRouteImport.update({
  id: '/(public)/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AppProfileIndexRoute = AppProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => AppRoute,
} as any)

const publicAuthIndexRoute = publicAuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicAuthRouteRoute,
} as any)

const publicAuthLoginLazyRoute = publicAuthLoginLazyImport
  .update({
    id: '/login',
    path: '/login',
    getParentRoute: () => publicAuthRouteRoute,
  } as any)
  .lazy(() => import('./routes/(public)/auth/login.lazy').then((d) => d.Route))

const publicAuthRegisterRoute = publicAuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => publicAuthRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/(public)/auth': {
      id: '/(public)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof publicAuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardImport
      parentRoute: typeof AppImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexLazyImport
      parentRoute: typeof AppImport
    }
    '/(public)/auth/register': {
      id: '/(public)/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof publicAuthRegisterImport
      parentRoute: typeof publicAuthRouteImport
    }
    '/(public)/auth/login': {
      id: '/(public)/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof publicAuthLoginLazyImport
      parentRoute: typeof publicAuthRouteImport
    }
    '/(public)/auth/': {
      id: '/(public)/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof publicAuthIndexImport
      parentRoute: typeof publicAuthRouteImport
    }
    '/_app/profile/': {
      id: '/_app/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileIndexImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppIndexLazyRoute: typeof AppIndexLazyRoute
  AppProfileIndexRoute: typeof AppProfileIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppIndexLazyRoute: AppIndexLazyRoute,
  AppProfileIndexRoute: AppProfileIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface publicAuthRouteRouteChildren {
  publicAuthRegisterRoute: typeof publicAuthRegisterRoute
  publicAuthLoginLazyRoute: typeof publicAuthLoginLazyRoute
  publicAuthIndexRoute: typeof publicAuthIndexRoute
}

const publicAuthRouteRouteChildren: publicAuthRouteRouteChildren = {
  publicAuthRegisterRoute: publicAuthRegisterRoute,
  publicAuthLoginLazyRoute: publicAuthLoginLazyRoute,
  publicAuthIndexRoute: publicAuthIndexRoute,
}

const publicAuthRouteRouteWithChildren = publicAuthRouteRoute._addFileChildren(
  publicAuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AppRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/auth': typeof publicAuthRouteRouteWithChildren
  '/dashboard': typeof AppDashboardRoute
  '/': typeof AppIndexLazyRoute
  '/auth/register': typeof publicAuthRegisterRoute
  '/auth/login': typeof publicAuthLoginLazyRoute
  '/auth/': typeof publicAuthIndexRoute
  '/profile': typeof AppProfileIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutLazyRoute
  '/dashboard': typeof AppDashboardRoute
  '/': typeof AppIndexLazyRoute
  '/auth/register': typeof publicAuthRegisterRoute
  '/auth/login': typeof publicAuthLoginLazyRoute
  '/auth': typeof publicAuthIndexRoute
  '/profile': typeof AppProfileIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/(public)/auth': typeof publicAuthRouteRouteWithChildren
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/': typeof AppIndexLazyRoute
  '/(public)/auth/register': typeof publicAuthRegisterRoute
  '/(public)/auth/login': typeof publicAuthLoginLazyRoute
  '/(public)/auth/': typeof publicAuthIndexRoute
  '/_app/profile/': typeof AppProfileIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/about'
    | '/auth'
    | '/dashboard'
    | '/'
    | '/auth/register'
    | '/auth/login'
    | '/auth/'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/dashboard'
    | '/'
    | '/auth/register'
    | '/auth/login'
    | '/auth'
    | '/profile'
  id:
    | '__root__'
    | '/_app'
    | '/about'
    | '/(public)/auth'
    | '/_app/dashboard'
    | '/_app/'
    | '/(public)/auth/register'
    | '/(public)/auth/login'
    | '/(public)/auth/'
    | '/_app/profile/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AboutLazyRoute: typeof AboutLazyRoute
  publicAuthRouteRoute: typeof publicAuthRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AboutLazyRoute: AboutLazyRoute,
  publicAuthRouteRoute: publicAuthRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/about",
        "/(public)/auth"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/dashboard",
        "/_app/",
        "/_app/profile/"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/(public)/auth": {
      "filePath": "(public)/auth/route.tsx",
      "children": [
        "/(public)/auth/register",
        "/(public)/auth/login",
        "/(public)/auth/"
      ]
    },
    "/_app/dashboard": {
      "filePath": "_app/dashboard.tsx",
      "parent": "/_app"
    },
    "/_app/": {
      "filePath": "_app/index.lazy.tsx",
      "parent": "/_app"
    },
    "/(public)/auth/register": {
      "filePath": "(public)/auth/register.tsx",
      "parent": "/(public)/auth"
    },
    "/(public)/auth/login": {
      "filePath": "(public)/auth/login.lazy.tsx",
      "parent": "/(public)/auth"
    },
    "/(public)/auth/": {
      "filePath": "(public)/auth/index.tsx",
      "parent": "/(public)/auth"
    },
    "/_app/profile/": {
      "filePath": "_app/profile/index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
